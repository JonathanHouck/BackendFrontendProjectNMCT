function Message(e,t,r,n,o){this.rentingId=e,this.senderId=t,this.name=r,this.content=n,this.createdOn=o}function Product(e,t,r,n,o,i,a,s,u,c){this.id=e,this.productName=t,this.pricePerDay=r,this.description=n,this.url=o,this.publicid=i,this.place=a,this.longitude=s,this.latitude=u,this.isDeleted=c}function Renting(e,t,r,n,o,i,a,s){this.id=e,this.renterFrom=t,this.renterTo=r,this.productId=n,this.fromDate=o,this.toDate=i,this.daysToRent=a,this.totalPrice=s}function RentingWithUsers(e,t,r,n,o,i,a){this.id=e,this.renterFrom=t,this.renterTo=r,this.fromDate=n,this.toDate=o,this.daysToRent=i,this.totalPrice=a}function UserWithCredentials(e,t,r,n,o,i){this.id=e,this.firstname=t,this.surname=r,this.local=n,this.google=o,this.products=i}function UserWithoutCredentials(e,t,r,n,o){this.id=e,this.firstname=t,this.surname=r,this.emailadres=n,this.product=o}function animate(e,t){e.removeClass("hide-for-animation"),e.addClass("animated "+t)}Product.prototype.toString=function(){return this.productName},Product.prototype.shortDescription=function(){return this.description?this.description.length<250?this.description:this.description.substring(0,250)+" ...":"/"},Product.prototype.shortProductName=function(){return this.productName.length<17?this.productName:this.productName.substring(0,17)+" ..."},Renting.prototype.toString=function(){return this.renterFrom},UserWithCredentials.prototype.toString=function(){return this.firstname+" "+this.surname},UserWithoutCredentials.prototype.toString=function(){return this.firstname+" "+this.surname},function(){"use strict";angular.module("swoppr",["ngRoute","ngMessages","ngAnimate","angular-scroll-animate","ui.bootstrap","httpFactory","ngFileUpload","uiGmapgoogle-maps"]).config(["uiGmapGoogleMapApiProvider","$routeProvider","$locationProvider",function(e,t,r){t.when("/",{templateUrl:"partials/index",controller:"IndexCtrl"}).when("/toRent",{templateUrl:"partials/toRent",controller:"ToRentCtrl",auth:!0}).when("/rentProduct/:id?",{templateUrl:"partials/rentProduct",controller:"RentProductCtrl",auth:!0}).when("/detailProduct/:id?",{templateUrl:"partials/detailProduct",controller:"DetailProductCtrl",auth:!0}).when("/detailRenting/:id?",{templateUrl:"partials/detailRenting",controller:"DetailRentingCtrl",auth:!0}).when("/placeProduct",{templateUrl:"partials/placeProduct",controller:"PlaceProductCtrl",auth:!0}).when("/myProducts",{templateUrl:"partials/myProducts",controller:"MyProductsCtrl"}).when("/editProduct/:id",{templateUrl:"partials/editProduct",controller:"EditProductCtrl"}).when("/myRentings",{templateUrl:"partials/myRentings",controller:"MyRentingsCtrl"}).when("/editRenting/:id",{templateUrl:"partials/editRenting",controller:"EditRentingCtrl"}).when("/login",{templateUrl:"partials/login",controller:"LoginCtrl"}).when("/register",{templateUrl:"partials/register",controller:"RegisterCtrl"}).when("/profile",{templateUrl:"partials/profile",auth:!0}).otherwise({redirectTo:"/"}),r.html5Mode(!0),e.configure({key:"AIzaSyBpqFRZqco4RCdLgKum7ZNF5eNqLiyB9cc",v:"3.17",libraries:"places"})}]).run(["$rootScope","$location","$http","$route","UserService",function(e,t,r,n,o){e.$on("$routeChangeStart",function(r){function i(t){t&&(t.error?e.user="":e.user=t)}function a(e){console.log(e)}e.user||o.userData().then(i,a);var s=t.path(),u=n.routes[s];u&&u.auth&&"error"==e.user&&t.path("/login")})}])}(),function(){"use strict";function e(e){e.noWrapSlides=!0;var t=e.slides=[];t.push({image:"images/geldVerdienen.png",text:"Gebruik je enkel in het weekend uw grasmaaier? Verdien nu in de weekdagen geld ermee!",title:"Geld verdienen"}),t.push({image:"images/kruiwagen.png",text:"Enkel bij het verhuizen een kruiwagen nodig? Huur nu een kruiwagen voor deze periode!",title:"Artikelen verhuren"})}angular.module("swoppr").controller("CarouselCtrl",["$scope",e])}(),function(){"use strict";function e(e,t,r){e.user=[];var n=function(t){e.user=t,"error"!=e.user&&(e.map={center:{latitude:e.user.product.latitude,longitude:e.user.product.longitude},zoom:16},e.marker={id:0,coords:{latitude:e.user.product.latitude,longitude:e.user.product.longitude}})},o=function(e){console.log(e)},i=t.id;r.byIdUser(i).then(n,o)}angular.module("swoppr").controller("DetailProductCtrl",["$scope","$routeParams","ProductService",e])}(),function(){"use strict";function e(e,t,r,n,o){var i=function(r){if("string"==typeof r){if("error"==r)return void(t.whoRents="noRenting")}else if(e.user.id==r.renterFrom.id)t.whoRents="renterFrom",t.renting=r;else{if(e.user.id!=r.renterTo.id)return void(t.whoRents="noAccess");t.whoRents="renterTo",t.renting=r}var n=function(e){t.messages=e},i=function(e){console.log(e)};o.getMessages(s).then(n,i)},a=function(e){console.log(e)},s=r.id;n.byId(s).then(i,a);var u=io.connect();u.emit("join renting",s),u.on("broadcast message",function(e){t.messages.push(e),t.$apply()}),t.addMessage=function(){var e=new Message(s,t.user.id,t.user.toString(),t.content,Date.now()+36e5),r=function(e){t.messages.push(e),u.emit("newMessage",{rentid:s,message:e}),t.content=""},n=function(e){console.log(e)};o.addMessage(e,s).then(r,n)},t.validate=function(e){if(1==e){if(t.chat.content.$dirty&&t.chat.content.$invalid)return"has-error";if(t.chat.content.$dirty&&t.chat.content.$valid)return"has-success"}}}angular.module("swoppr").controller("DetailRentingCtrl",["$rootScope","$scope","$routeParams","RentingService","ChatService",e])}(),function(){"use strict";function e(e,t,r,n,o){function i(t){t.data&&(t.data.ok&&r.path("/detailProduct/"+t.data.ok),t.data.error&&e.alerts.push({type:"danger",msg:t.data.error}))}function a(e){console.log(e)}e.alerts=[],e.closeAlert=function(t){e.alerts.splice(t,1)},e.user=[];var s=function(t){e.user=t},u=function(e){console.log(e)},c=t.id;n.byIdUser(c).then(s,u),o.then(function(t){t.visualRefresh=!0,e.defaultBounds=new google.maps.LatLngBounds(new google.maps.LatLng(50.8252383,3.2481521)),e.map.bounds={northeast:{latitude:e.defaultBounds.getNorthEast().lat(),longitude:e.defaultBounds.getNorthEast().lng()},southwest:{latitude:e.defaultBounds.getSouthWest().lat(),longitude:-e.defaultBounds.getSouthWest().lng()}},e.searchbox.options.bounds=new google.maps.LatLngBounds(e.defaultBounds.getNorthEast(),e.defaultBounds.getSouthWest())}),angular.extend(e,{selected:{options:{visible:!1},templateurl:"../templates/window.html",templateparameter:{}},map:{control:{},center:{latitude:51.052568,longitude:3.1701058},zoom:9,dragging:!1,bounds:{},markers:[],idkey:"place_id",events:{idle:function(e){},dragend:function(t){var r=t.getBounds(),n=r.getNorthEast(),o=r.getSouthWest();e.searchbox.options.bounds=new google.maps.LatLngBounds(o,n)}}},searchbox:{template:"../templates/searchbox.html",options:{autocomplete:!0,types:["geocode"],componentRestrictions:{country:"be"}},events:{place_changed:function(t){var r=t.getPlace();if(r.address_components){var n=[],o=new google.maps.LatLngBounds,i={id:r.place_id,place_id:r.place_id,name:r.address_components[0].long_name,latitude:r.geometry.location.lat(),longitude:r.geometry.location.lng(),options:{visible:!1},templateurl:"window.tpl.html",templateparameter:r};n.push(i),o.extend(r.geometry.location),e.map.bounds={northeast:{latitude:o.getNorthEast().lat(),longitude:o.getNorthEast().lng()},southwest:{latitude:o.getSouthWest().lat(),longitude:o.getSouthWest().lng()}},angular.forEach(n,function(t){t.closeClick=function(){e.selected.options.visible=!1,t.options.visble=!1,console.log(t)},t.onClicked=function(){e.selected.options.visible=!1,e.selected=t,e.selected.options.visible=!0}}),e.map.markers=n,e.user.product.longitude=n[0].longitude,e.user.product.latitude=n[0].latitude,e.user.product.place=r.formatted_address}}}}}),e.editProduct=function(t){n.edit(t,{productId:e.user.product.id,productName:e.user.product.productName,pricePerDay:e.user.product.pricePerDay,description:e.user.product.description,url:e.user.product.url,publicid:e.user.product.publicid,place:e.user.product.place,longitude:e.user.product.longitude,latitude:e.user.product.latitude}).then(i,a)},e.validate=function(t){if(e.editProductForm)if(1==t){if(e.editProductForm.productName.$dirty&&e.editProductForm.productName.$invalid)return"has-error";if(e.editProductForm.productName.$dirty&&e.editProductForm.productName.$valid)return"has-success"}else if(2==t){if(e.editProductForm.pricePerDay.$dirty&&e.editProductForm.pricePerDay.$invalid)return"has-error";if(e.editProductForm.pricePerDay.$dirty&&e.editProductForm.pricePerDay.$valid)return"has-success"}else if(3==t){if(e.editProductForm.description.$dirty&&e.editProductForm.description.$invalid)return"has-error";if(e.editProductForm.description.$dirty&&e.editProductForm.description.$valid)return"has-success"}else if(4==t){if(e.editProductForm.picture.$dirty&&e.editProductForm.picture.$invalid)return"has-error";if(e.editProductForm.picture.$dirty&&e.editProductForm.picture.$valid)return"has-success"}else if(5==t&&e.editProductForm.location.$valid)return"has-success"}}angular.module("swoppr").controller("EditProductCtrl",["$scope","$routeParams","$location","ProductService","uiGmapGoogleMapApi",e])}(),function(){"use strict";function e(e,t,r,n,o){t.alerts=[],t.closeAlert=function(e){t.alerts.splice(e,1)};var i=function(r){if("string"==typeof r){if("error"==r)return void(t.whoRents="noRenting")}else{if(e.user.id==r.renterFrom.id)return void(t.whoRents="noAccess");if(e.user.id!=r.renterTo.id)return void(t.whoRents="noAccess");t.whoRents="renterTo",t.renting=r,t.$watch("renting.fromDate",function(){t.setMinDates(),t.renting.fromDate>=t.renting.toDate&&(t.renting.toDate=new Date(t.renting.fromDate),t.renting.toDate.setDate(t.renting.toDate.getDate()+1)),t.renting.fromDate.status={opened:!1},t.renting.fromDate.open=function(e){t.renting.fromDate.status.opened=!0},t.setDaysToRent()}),t.$watch("renting.toDate",function(){t.setMinDates(),t.renting.toDate.open=function(e){t.renting.toDate.status.opened=!0},t.renting.toDate.status={opened:!1},t.setDaysToRent()}),t.setMinDates=function(){t.renting.fromDate.minDate=new Date,t.renting.toDate.minDate=new Date(t.renting.fromDate),t.renting.toDate.minDate.setDate(t.renting.toDate.minDate.getDate()+1)},t.dateOptions={formatYear:"yy",startingDay:1},t.format="dd/MM/yyyy",t.$watch("renting.renterFrom",function(){t.setDaysToRent()}),t.setDaysToRent=function(){var e=864e5;t.renting.daysToRent=Math.round(Math.abs((t.renting.fromDate.getTime()-t.renting.toDate.getTime())/e)),t.renting.renterFrom.product&&(t.renting.totalPrice=t.renting.renterFrom.product.pricePerDay*t.renting.daysToRent)}}},a=function(e){console.log(e)},s=r.id;o.byId(s).then(i,a);var u=function(e){e.data&&(e.data.ok&&n.path("/detailRenting/"+e.data.ok._id),e.data.error&&t.alerts.push({type:"danger",msg:e.data.error}))},c=function(e){console.log(e)};t.editRenting=function(){if(e.user&&t.renting){var r=new Renting(t.renting.id,t.renting.renterFrom.id,t.renting.renterTo.id,t.renting.renterFrom.product.id,t.renting.fromDate,t.renting.toDate,t.renting.daysToRent,t.renting.totalPrice);o.edit(r).then(u,c)}}}angular.module("swoppr").controller("EditRentingCtrl",["$rootScope","$scope","$routeParams","$location","RentingService",e])}(),function(){"use strict";function e(e){e.fadeIn=function(e){animate(e,"fadeIn")},e.fadeInUp=function(e){animate(e,"fadeInUp")},e.fadeInLeft=function(e){animate(e,"fadeInLeft")},e.fadeInRight=function(e){animate(e,"fadeInRight")},e.zoomIn=function(e){animate(e,"zoomIn")}}angular.module("swoppr").controller("IndexCtrl",["$scope",e])}(),function(){"use strict";function e(e,t,r){t.alerts=[],t.closeAlert=function(e){t.alerts.splice(e,1)},t.login=function(){function n(n){function o(t){e.user=t}function i(e){console.log(e)}n.data&&n.data.error&&t.alerts.push({type:"danger",msg:n.data.error}),r.userData().then(o,i)}function o(e){console.log(e)}r.login({email:this.email,password:this.password}).then(n,o)},t.validate=function(e){if(1==e){if(t.loginForm.email.$dirty&&t.loginForm.email.$invalid)return"has-error";if(t.loginForm.email.$dirty&&t.loginForm.email.$valid)return"has-success"}else if(2==e){if(t.loginForm.password.$dirty&&t.loginForm.password.$invalid)return"has-error";if(t.loginForm.password.$dirty&&t.loginForm.password.$valid)return"has-success"}}}angular.module("swoppr").controller("LoginCtrl",["$rootScope","$scope","UserService",e])}(),function(){"use strict";function e(e,t,r,n,o,i,a,s,u){"product"==u?(t.title="Verwijderen product",t.message="Bent u zeker dat u het artikel "+s+" wilt verwijderen?"):("renting.renterFrom"==u||"renting.renterTo"==u)&&(t.title="Verwijderen verhuring",t.message="Bent u zeker dat u de verhuring voor het artikel "+s+" wilt verwijderen?"),t["delete"]=function(){function t(t){if(t.data.ok){var r;r=n("filter")(e.user.products,function(e){return e.id===t.data.ok})[0];var o=e.user.products.indexOf(r);e.user.products[o].isDeleted=!0}t.data.error&&console.log(t.data.error)}function s(e){console.log(e)}function c(t){if(t.data.ok){var r,o;"renting.renterFrom"==u?(r=n("filter")(e.rentingsRenterFrom,function(e){return e.id===t.data.ok})[0],o=e.rentingsRenterTo.indexOf(r),e.rentingsRenterFrom.splice(o,1)):"renting.renterTo"==u&&(r=n("filter")(e.rentingsRenterTo,function(e){return e.id===t.data.ok})[0],o=e.rentingsRenterTo.indexOf(r),e.rentingsRenterTo.splice(o,1))}t.data.error&&console.log(t.data.error)}function d(e){console.log(e)}"product"==u?i.remove(a).then(t,s):("renting.renterFrom"==u||"renting.renterTo"==u)&&o.remove(a).then(c,d),r.close()},t.cancel=function(){r.dismiss("cancel")}}angular.module("swoppr").controller("ModalInstanceCtrl",["$rootScope","$scope","$uibModalInstance","$filter","RentingService","ProductService","id","product","who",e])}(),function(){"use strict";function e(e,t,r,n){function o(t){t&&(t.error?e.user.products="":e.user.products=t.products)}function i(e){console.log(e)}t.sortType="productName",e.user.products="loading",n.userData().then(o,i),e.$watch("user",function(){e.user&&(t.animationsEnabled=!0,t.open=function(e,n,o){r.open({animation:t.animationsEnabled,templateUrl:"../templates/myModalContent.html",controller:"ModalInstanceCtrl",resolve:{id:function(){return e},product:function(){return n},who:function(){return o}}})})})}angular.module("swoppr").controller("MyProductsCtrl",["$rootScope","$scope","$uibModal","UserService",e])}(),function(){"use strict";function e(e,t,r,n){e.rentingsRenterFrom="loading",e.rentingsRenterTo="loading",t.sortType1="renterFrom.product.productName",t.sortType2="renterFrom.product.productName",e.$watch("user",function(){if(e.user){var o=function(t){e.rentingsRenterFrom=t},i=function(e){console.log(e)};n.byRenterFrom(e.user.id).then(o,i);var a=function(t){e.rentingsRenterTo=t},s=function(e){console.log(e)};n.byRenterTo(e.user.id).then(a,s),t.animationsEnabled=!0,t.open=function(e,n,o){r.open({animation:t.animationsEnabled,templateUrl:"../templates/myModalContent.html",controller:"ModalInstanceCtrl",resolve:{id:function(){return e},product:function(){return n},who:function(){return o}}})}}})}angular.module("swoppr").controller("MyRentingsCtrl",["$rootScope","$scope","$uibModal","RentingService",e])}(),function(){"use strict";function e(e,t){e.isCollapsed=!0,e.getClass=function(e){return t.path()===e?"active":""}}angular.module("swoppr").controller("NavbarCtrl",["$scope","$location",e])}(),function(){"use strict";function e(e,t,r,n,o){function i(e){e.data&&(e.data.ok&&r.path("/detailProduct/"+e.data.ok._id),e.data.error&&t.alerts.push({type:"danger",msg:e.data.error}))}function a(e){console.log(e)}t.alerts=[],t.closeAlert=function(e){t.alerts.splice(e,1)},o.then(function(e){e.visualRefresh=!0,t.defaultBounds=new google.maps.LatLngBounds(new google.maps.LatLng(50.8252383,3.2481521)),t.map.bounds={northeast:{latitude:t.defaultBounds.getNorthEast().lat(),longitude:t.defaultBounds.getNorthEast().lng()},southwest:{latitude:t.defaultBounds.getSouthWest().lat(),longitude:-t.defaultBounds.getSouthWest().lng()}},t.searchbox.options.bounds=new google.maps.LatLngBounds(t.defaultBounds.getNorthEast(),t.defaultBounds.getSouthWest())}),angular.extend(t,{selected:{options:{visible:!1},templateurl:"../templates/window.html",templateparameter:{}},map:{control:{},center:{latitude:51.052568,longitude:3.1701058},zoom:9,dragging:!1,bounds:{},markers:[],idkey:"place_id",events:{idle:function(e){},dragend:function(e){var r=e.getBounds(),n=r.getNorthEast(),o=r.getSouthWest();t.searchbox.options.bounds=new google.maps.LatLngBounds(o,n)}}},searchbox:{template:"../templates/searchbox.html",options:{autocomplete:!0,types:["geocode"],componentRestrictions:{country:"be"}},events:{place_changed:function(e){var r=e.getPlace();if(r.address_components){var n=[],o=new google.maps.LatLngBounds,i={id:r.place_id,place_id:r.place_id,name:r.address_components[0].long_name,latitude:r.geometry.location.lat(),longitude:r.geometry.location.lng(),options:{visible:!1},templateurl:"window.tpl.html",templateparameter:r};n.push(i),o.extend(r.geometry.location),t.map.bounds={northeast:{latitude:o.getNorthEast().lat(),longitude:o.getNorthEast().lng()},southwest:{latitude:o.getSouthWest().lat(),longitude:o.getSouthWest().lng()}},angular.forEach(n,function(e){e.closeClick=function(){t.selected.options.visible=!1,e.options.visble=!1,console.log(e)},e.onClicked=function(){t.selected.options.visible=!1,t.selected=e,t.selected.options.visible=!0}}),t.map.markers=n,t.place=r.formatted_address}}}}}),e.$watch("user",function(){e.user&&(t.addProduct=function(r){n.add(r,{userId:e.user.id,productName:t.productName,pricePerDay:t.pricePerDay,description:t.description,place:t.place,longitude:t.map.markers[0].longitude,latitude:t.map.markers[0].latitude}).then(i,a)})}),t.validate=function(e){if(t.placeProductForm)if(1==e){if(t.placeProductForm.productName.$dirty&&t.placeProductForm.productName.$invalid)return"has-error";if(t.placeProductForm.productName.$dirty&&t.placeProductForm.productName.$valid)return"has-success"}else if(2==e){if(t.placeProductForm.pricePerDay.$dirty&&t.placeProductForm.pricePerDay.$invalid)return"has-error";if(t.placeProductForm.pricePerDay.$dirty&&t.placeProductForm.pricePerDay.$valid)return"has-success"}else if(3==e){if(t.placeProductForm.description.$dirty&&t.placeProductForm.description.$invalid)return"has-error";if(t.placeProductForm.description.$dirty&&t.placeProductForm.description.$valid)return"has-success"}else if(4==e){if(t.placeProductForm.picture.$dirty&&t.placeProductForm.picture.$invalid)return"has-error";if(t.placeProductForm.picture.$dirty&&t.placeProductForm.picture.$valid)return"has-success"}else if(5==e&&t.placeProductForm.place.$valid)return"has-success"}}angular.module("swoppr").controller("PlaceProductCtrl",["$rootScope","$scope","$location","ProductService","uiGmapGoogleMapApi",e])}(),function(){"use strict";function e(e,t,r){t.alerts=[],t.closeAlert=function(e){t.alerts.splice(e,1)},t.register=function(){function n(n){function o(t){e.user=t}function i(e){console.log(e)}n.data&&n.data.error&&t.alerts.push({type:"danger",msg:n.data.error}),r.userData().then(o,i)}function o(e){console.log(e)}r.register({firstname:this.firstname,surname:this.surname,email:this.email,password:this.password}).then(n,o)},t.validate=function(e){if(1==e){if(t.registerForm.firstname.$dirty&&t.registerForm.firstname.$invalid)return"has-error";if(t.registerForm.firstname.$dirty&&t.registerForm.firstname.$valid)return"has-success"}else if(2==e){if(t.registerForm.surname.$dirty&&t.registerForm.surname.$invalid)return"has-error";if(t.registerForm.surname.$dirty&&t.registerForm.surname.$valid)return"has-success"}else if(3==e){if(t.registerForm.email.$dirty&&t.registerForm.email.$invalid)return"has-error";if(t.registerForm.email.$dirty&&t.registerForm.email.$valid)return"has-success"}else if(4==e){if(t.registerForm.password.$dirty&&t.registerForm.password.$invalid)return"has-error";if(t.registerForm.password.$dirty&&t.registerForm.password.$valid)return"has-success"}else if(5==e){if(t.registerForm.passwordAgain.$dirty&&t.registerForm.passwordAgain.$invalid)return"has-error";if(t.registerForm.passwordAgain.$dirty&&t.registerForm.passwordAgain.$valid)return"has-success"}}}angular.module("swoppr").controller("RegisterCtrl",["$rootScope","$scope","UserService",e])}(),function(){"use strict";function e(e,t,r,n,o,i){t.alerts=[],t.closeAlert=function(e){t.alerts.splice(e,1)},t.user=[];var a=r.id,s=function(r){e.user.id==r.id?t.ownProduct=a:r.product&&r.product.isDeleted===!0?t.user="deleted":t.user=r},u=function(e){console.log(e)};o.byIdUser(a).then(s,u),t.setDates=function(){t.dt1=new Date,t.dt2=new Date(t.dt1.getDate()+1)},t.setDates(),t.$watch("dt1",function(){t.setMinDates(),t.dt1>=t.dt2&&(t.dt2=new Date(t.dt1),t.dt2.setDate(t.dt2.getDate()+1)),t.dt1.status={opened:!1},t.dt1.open=function(e){t.dt1.status.opened=!0},t.setDaysToRent()}),t.$watch("dt2",function(){t.setMinDates(),t.dt2.open=function(e){t.dt2.status.opened=!0},t.dt2.status={opened:!1},t.setDaysToRent()}),t.setMinDates=function(){t.dt1.minDate=new Date,t.dt2.minDate=new Date(t.dt1),t.dt2.minDate.setDate(t.dt2.minDate.getDate()+1)},t.dateOptions={formatYear:"yy",startingDay:1},t.format="dd/MM/yyyy",t.$watch("user",function(){t.setDaysToRent()}),t.setDaysToRent=function(){var e=864e5;t.daysToRent=Math.round(Math.abs((t.dt1.getTime()-t.dt2.getTime())/e)),t.user.product&&(t.totalPrice=t.user.product.pricePerDay*t.daysToRent)};var c=function(e){e.data&&(e.data.ok&&n.path("/detailRenting/"+e.data.ok._id),e.data.error&&t.alerts.push({type:"danger",msg:e.data.error}))},d=function(e){console.log(e)};t.rentProduct=function(){if(e.user&&t.user){var r=new Renting;r.renterFrom=t.user.id,r.renterTo=e.user.id,r.productId=t.user.product.id,r.fromDate=t.dt1,r.toDate=t.dt2,r.daysToRent=t.daysToRent,r.totalPrice=t.totalPrice,i.add(r).then(c,d)}}}angular.module("swoppr").controller("RentProductCtrl",["$rootScope","$scope","$routeParams","$location","ProductService","RentingService",e])}(),function(){"use strict";function e(e,t){e.sortProperty="pricePerDay";var r=function(t){e.products=t},n=function(e){console.log(e)};t.all().then(r,n)}angular.module("swoppr").controller("ToRentCtrl",["$scope","ProductService",e])}(),function(){"use strict";function e(e){e.place={},e.showPlaceDetails=function(t){e.place=t}}angular.module("swoppr").controller("WindowCtrl",["$scope",e])}(),function(){"use strict";angular.module("angular-scroll-animate",[]).directive("whenVisible",["$document","$window",function(e,t){var r=function(e,t,r,n,o){var i=e[0].getBoundingClientRect(),a=i.bottom,s=n*i.height,u=a-s>0&&t>a;e.data("hidden")&&u&&(r(e,o),e.data("hidden",!1))};return{restrict:"A",scope:{whenVisible:"&",delayPercent:"=?"},controller:["$scope",function(e){if(!e.whenVisible||!angular.isFunction(e.whenVisible()))throw new Error("Directive: angular-scroll-animate 'when-visible' attribute must specify a function.");if(e.delayPercent){var t=parseFloat(e.delayPercent);if(Number.isNaN(t)||0>t||t>1)throw new Error("Directive: angular-scroll-animate 'delay-percent' attribute must be a decimal fraction between 0 and 1.")}}],link:function(n,o,i){var a=i.delayPercent||.25,s=function(){var t=e[0].documentElement,i=t.clientHeight;r(o,i,n.whenVisible(),a,n)};e.on("scroll",s),angular.element(t).on("resize orientationchange",s);o.data("hidden",!0),n.$evalAsync(s)}}}])}(),function(){"use strict";function e(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,r,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}angular.module("swoppr").directive("compareTo",e)}(),function(){"use strict";function e(e,t){return{restrict:"A",link:function(r,n){n.on("click",function(r){function n(t){e.user=""}function o(e){console.log(e)}r.preventDefault(),t.logout().then(n,o)})}}}angular.module("swoppr").directive("logout",["$rootScope","UserService",e])}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"../templates/product.html"}}angular.module("swoppr").directive("productforrent",e)}(),function(){"use strict";function e(){return{restrict:"A",link:function(e,t,r){t.on("click",function(e){e.preventDefault(),window.location=r.href})}}}angular.module("swoppr").directive("redir",e)}(),function(){angular.module("httpFactory",[]).factory("myHttpResponseInterceptor",["$q","$location",function(e,t){return{response:function(r){return"object"==typeof r.data&&r.data.redirect?(t.path(r.data.redirect),{}||e.when(r)):r||e.when(r)}}}]).config(["$httpProvider",function(e){e.interceptors.push("myHttpResponseInterceptor")}])}(),function(){"use strict";var e=function(e){var t=function(t){var r="/api/chat/"+t;return e.get(r).then(function(e){if(e.data.error)return"error";var t=[];return angular.forEach(e.data.ok,function(e){var r=new Message(e._renting,e._sender,e.name,e.content,e.createdOn);t.push(r)}),t})},r=function(t,r){var n="/api/chat/"+r;return e.post(n,t).then(function(e){if(e.data.error)return"error";var t=e.data.ok,r=new Message(t._renting,t._sender,t.name,t.content,t.createdOn);return r})};return{getMessages:t,addMessage:r}};angular.module("swoppr").factory("ChatService",["$http",e])}(),function(){"use strict";var e=function(e,t){function r(e){var t=e.url?e.url:"/";return new Product(e._id,e.productName,e.pricePerDay,e.description,t,e.publicid,e.place,e.longitude,e.latitude,e.isDeleted)}var n=function(t){var r="/api/product/getById/"+t;return e.get(r).then(function(e){if(e.data.error)return"error";var t=e.data.ok;return new Product(t.productName,t.pricePerDay,t.description,t.createdOn)})},o=function(t){var n="/api/product/getByIdUser/"+t;return e.get(n).then(function(e){if(e.data.error)return"error";var t=e.data.ok.product,n=r(t),o=e.data.ok;return new UserWithoutCredentials(o._id,o.firstname,o.surname,o.local.email,n)})},i=function(){var t="/api/product/getAll/";return e.get(t).then(function(e){if(e.data.error)return"error";var t=[];return angular.forEach(e.data.ok,function(e){if(e.isDeleted===!1){var n=r(e);t.push(n)}}),t})},a=function(r,n){var o="/api/product/newProduct/";if(r){var i=r.upload=t.upload({url:o,file:r,data:n}).then(function(e){return e});return i}return e.post(o,n).then(function(e){return e})},s=function(r,n){var o="/api/product/editProduct/";if(r){var i=r.upload=t.upload({url:o,file:r,data:n}).then(function(e){return e});return i}return e.post(o,n).then(function(e){return e})},u=function(t){var r="/api/product/removeById/"+t;return e.get(r).then(function(e){return e})};return{byId:n,byIdUser:o,all:i,add:a,edit:s,remove:u}};angular.module("swoppr").factory("ProductService",["$http","Upload",e])}(),function(){"use strict";var e=function(e){function t(e){return new Product(e._id,e.productName,parseInt(e.pricePerDay),e.description,e.url,e.publicid,e.place,e.longitude,e.latitude,e.isDeleted)}function r(e,t){return new UserWithoutCredentials(e._id,e.firstname,e.surname,e.local.email,t)}function n(e){return new UserWithoutCredentials(e._id,e.firstname,e.surname,e.local.email)}function o(e,t,r){return new RentingWithUsers(e._id,t,r,new Date(e.fromDate),new Date(e.toDate),parseInt(e.daysToRent),parseInt(e.totalPrice))}var i=function(i){var a="/api/renting/getById/"+i;return e.get(a).then(function(e){if(e.data.error)return"error";var i=e.data.ok,a=i.renterFrom.product,s=t(a),u=i.renterFrom,c=r(u,s),d=i.renterTo,l=n(d),p=i;return o(p,c,l)})},a=function(i){var a="/api/renting/getAllRentingsRenterFrom/"+i;return e.get(a).then(function(e){if(e.data.error)return"error";var i=[];return angular.forEach(e.data.ok,function(e){var a=e.renterFrom.product,s=t(a),u=e.renterFrom,c=r(u,s),d=e.renterTo,l=n(d);i.push(o(e,c,l))}),i})},s=function(i){var a="/api/renting/getAllRentingsRenterTo/"+i;return e.get(a).then(function(e){if(e.data.error)return"error";var i=[];return angular.forEach(e.data.ok,function(e){var a=e.renterFrom.product,s=t(a),u=e.renterFrom,c=r(u,s),d=e.renterTo,l=n(d);i.push(o(e,c,l))}),i})},u=function(t){var r="/api/renting/newRenting/";return e.post(r,t).then(function(e){return e})},c=function(t){var r="/api/renting/editRenting/";return e.post(r,t).then(function(e){return e})},d=function(t){var r="/api/renting/removeById/"+t;return e.get(r).then(function(e){return e})};return{byId:i,byRenterFrom:a,byRenterTo:s,add:u,edit:c,remove:d}};angular.module("swoppr").factory("RentingService",["$http",e])}(),function(){"use strict";var e=function(e){var t=function(t){var r="/partials/login";return e.post(r,t).then(function(e){return e})},r=function(t){var r="/partials/register";return e.post(r,t).then(function(e){return e})},n=function(){var t="/partials/logout";return e.post(t).then(function(e){return e})},o=function(){var t="/api/user/userDataNavbar/"+(new Date).getTime();return e.get(t).then(function(e){if(e.data.error)return"error";var t=[],r=e.data;return angular.forEach(r.products,function(e){if(e.isDeleted===!1){var r=new Product(e._id,e.productName,parseInt(e.pricePerDay),e.description,e.url,e.publicid,e.place,e.longitude,e.latitude,e.isDeleted);t.push(r)}}),new UserWithCredentials(r._id,r.firstname,r.surname,r.local,r.google,t)})},i=function(t){var r="/api/user/getById/"+t;return e.get(r).then(function(e){if(e.data.error)return"error";var t=e.data.ok;return new UserWithCredentials(t.firstname,t.surname,t.local.email,t.products,t.createdOn)})},a=function(){var t="/api/user/getAllUsersWithProducts";return e.get(t).then(function(e){if(e.data.error)return"error";var t=[];return angular.forEach(e.data,function(e){var r=new UserWithCredentials(e.firstname,e.surname,e.local.email,e.products,e.createdOn);t.push(r)}),t})},s=function(){var t="/api/user/getAll/";return e.get(t).then(function(e){if(e.data.error)return"error getting all users";var t=[];return angular.forEach(e.data.ok,function(e){var r=new UserWithCredentials(e.firstname,e.surname,e.local.email,e.products,e.createdOn);t.push(r)}),t})},u=function(t){var r="/api/user/newUser/";e.post(r,t).then(function(e){return e})};return{login:t,register:r,logout:n,userData:o,byId:i,AllWithProducts:a,add:u,all:s}};angular.module("swoppr").factory("UserService",["$http",e])}();
//# sourceMappingURL=data:application/json;base64,
