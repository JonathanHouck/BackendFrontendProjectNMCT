/**
 * Created by jonah on 12/24/2015.
 */
function Message(rentingId, senderId, name, content, createdOn) {
    this.rentingId = rentingId;
    this.senderId = senderId;
    this.name = name;
    this.content = content;
    this.createdOn = createdOn;
}
/**
 * Created by Greg on 04-Dec-15.
 */
function Product(_id, productName, pricePerDay, description, url, publicid, place, longitude, latitude, isDeleted){
    this.id = _id;
    this.productName = productName;
    this.pricePerDay = pricePerDay;
    this.description = description;
    this.url = url;
    this.publicid = publicid;
    this.place = place;
    this.longitude = longitude;
    this.latitude = latitude;
    this.isDeleted = isDeleted;
}

Product.prototype.toString = function(){
    return this.productName;
};

Product.prototype.shortDescription = function() {
    if (!this.description) return "/";

    if (this.description.length < 250) {
        return this.description;
    } else {
        return this.description.substring(0, 250) + " ...";
    }
};

Product.prototype.shortProductName = function() {
    if (this.productName.length < 17) {
        return this.productName;
    } else {
        return this.productName.substring(0, 17) + " ...";
    }
};
/**
 * Created by Greg on 04-Dec-15.
 */
function Renting(id, renterId, userId, productId, fromDate, toDate, daysToRent, totalPrice) {
    this.id = id;
    this.renterFrom = renterId;
    this.renterTo = userId;
    this.productId = productId;
    this.fromDate = fromDate;
    this.toDate = toDate;
    this.daysToRent = daysToRent;
    this.totalPrice = totalPrice;
}

Renting.prototype.toString = function(){
    return this.renterFrom;
};
/**
 * Created by jonah on 12/23/2015.
 */
function RentingWithUsers(id, renterFrom, renterTo, fromDate, toDate, daysToRent, totalPrice) {
    this.id = id;
    this.renterFrom = renterFrom;
    this.renterTo = renterTo;
    this.fromDate = fromDate;
    this.toDate = toDate;
    this.daysToRent = daysToRent;
    this.totalPrice = totalPrice;
}
/**
 * Created by Greg on 04-Dec-15.
 */
function UserWithCredentials(_id, firstname, surname, local, google, products){
    this.id = _id;
    this.firstname = firstname;
    this.surname = surname;
    this.local = local;
    this.google = google;
    this.products = products;
}

UserWithCredentials.prototype.toString = function() {
    return this.firstname + " " + this.surname;
};
/**
 * Created by jonah on 12/23/2015.
 */
function UserWithoutCredentials(_id, firstname, surname, emailadres, product) {
    this.id = _id;
    this.firstname = firstname;
    this.surname = surname;
    this.emailadres = emailadres;
    this.product = product;
}

UserWithoutCredentials.prototype.toString = function(){
    return this.firstname + " " + this.surname;
};
(function () {
    'use strict';
    angular.module('swoppr', [
        'ngRoute',
        'ngMessages',
        'ngAnimate',
        'angular-scroll-animate',
        'ui.bootstrap',
        'httpFactory',
        'ngFileUpload',
        'uiGmapgoogle-maps'
    ])
    .
    config(['uiGmapGoogleMapApiProvider', '$routeProvider', '$locationProvider', function (GoogleMapApi, $routeProvider, $locationProvider) {
        $routeProvider.
        when('/', {
            templateUrl: 'partials/index',
            controller: 'IndexCtrl'
        }).
        when('/toRent', {
            templateUrl: 'partials/toRent',
            controller: 'ToRentCtrl',
            auth: true
        }).
        when('/rentProduct/:id?', {
            templateUrl: 'partials/rentProduct',
            controller: 'RentProductCtrl',
            auth: true
        }).
        when('/detailProduct/:id?', {
            templateUrl: 'partials/detailProduct',
            controller: 'DetailProductCtrl',
            auth: true
        }).
        when('/detailRenting/:id?', {
            templateUrl: 'partials/detailRenting',
            controller: 'DetailRentingCtrl',
            auth: true
        }).
        when('/chat/:id?', {
            templateUrl: 'partials/chat',
            controller: 'ChatioCtrl'
        }).
        when('/ServiceTester', {
            templateUrl: 'partials/ServiceTester',
            controller: "ServiceTesterCtrl"
        }).
        when('/placeProduct', {
            templateUrl: 'partials/placeProduct',
            controller: 'PlaceProductCtrl',
            auth: true
        }).
        when('/myProducts', {
            templateUrl: 'partials/myProducts',
            controller: 'MyProductsCtrl'
        }).
        when('/editProduct/:id', {
            templateUrl: 'partials/editProduct',
            controller: 'EditProductCtrl'
        }).
        when('/myRentings', {
            templateUrl: 'partials/myRentings',
            controller: 'MyRentingsCtrl'
        }).
        when('/editRenting/:id', {
            templateUrl: 'partials/editRenting',
            controller: 'EditRentingCtrl'
        }).
        when('/login', {
            templateUrl: 'partials/login',
            controller: 'LoginCtrl'
        }).
        when('/register', {
            templateUrl: 'partials/register',
            controller: 'RegisterCtrl'
        }).
        when('/profile', {
            templateUrl: 'partials/profile',
            auth: true
        }).
        otherwise({
            redirectTo: '/'
        });
        $locationProvider.html5Mode(true);

        GoogleMapApi.configure({
            key: 'AIzaSyBpqFRZqco4RCdLgKum7ZNF5eNqLiyB9cc',
            v: '3.17',
            libraries: 'places'
        });
    }])
    .
    run(['$rootScope', '$location', '$http', '$route', 'UserService', function($rootScope, $location, $http, $route, UserService) {
        $rootScope.$on( "$routeChangeStart", function(next) {
            function succesUserData(data) {
                if (data) {
                    if (data.error) {
                        $rootScope.user = "";
                    } else {
                        $rootScope.user = data;
                    }
                }
            }

            function errorUserData(response) {
                console.log(response);
            }

            if (!$rootScope.user) {
                UserService.userData().then(succesUserData, errorUserData);
            }

            var nextPath = $location.path();
            var nextRoute = $route.routes[nextPath];

            if (nextRoute) {
                //als pagina geauthorizeerd moet zijn en er geen user ingelogd is --> naar loginpagina
                if (nextRoute.auth && ($rootScope.user == "error")) {
                    $location.path("/login");
                }
            }
        });
    }]);
}());
/**
 * Created by jonah on 11/14/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
        .controller('CarouselCtrl', ['$scope', CarouselCtrl]);

    function CarouselCtrl($scope) {
        //$scope.myInterval = 5000;
        $scope.noWrapSlides = true;
        var slides = $scope.slides = [];

        slides.push({
            image: 'images/geldVerdienen.png',
            text: 'Gebruik je enkel in het weekend uw grasmaaier? Verdien nu in de weekdagen geld ermee!'
        });

        slides.push({
            image: 'images/kruiwagen.png',
            text: 'Enkel bij het verhuizen een kruiwagen nodig? Huur nu een kruiwagen voor deze periode!'
        });
    }
}());


/**
 * Created by jonah on 12/1/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('ChatioCtrl', ['$rootScope', '$scope', '$http', '$routeParams', ChatioCtrl]);

    function ChatioCtrl($rootScope, $scope, $http, $routeParams) {
        $scope.rentid = $routeParams.id;

        $scope.messages = [];

        $rootScope.$watch('user', function() {

            var name;
            if ($rootScope.user) {
                name = $rootScope.user.firstname + $rootScope.user.surname;
            }

            $scope.newMessage = createBlankMessage(name);

            //alle messages ophalen van het id in de url
            $http.get("/api/chat/" + $scope.rentid).then(function (result) {
                $scope.messages = result.data;
            }, function(err) {
                alert(err);
            });

            var socket = io.connect();

            socket.emit("join renting", $scope.rentid);

            socket.on("broadcast message", function(message) {
                $scope.messages.push(message);
                $scope.$apply();
            });

            //message saven aan de bijhorende renting
            $scope.save = function() {
                $http.post('/api/chat/' + $scope.rentid, $scope.newMessage).then(function(result) {
                    $scope.messages.push(result.data);
                    $scope.newNote = createBlankMessage(name);
                    socket.emit("newMessage", {rentid: $scope.rentid, message: result.data});
                }, function(err) {
                    alert(err);
                });
            };
        });
    }
}());

function createBlankMessage(name) {
    return {
        content: "",
        name: name
    };
}
/**
 * Created by jonah on 11/14/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
        .controller('DetailProductCtrl', ['$scope', '$routeParams', 'ProductService', DetailProductCtrl]);

    function DetailProductCtrl($scope, $routeParams, ProductService) {
        $scope.user = [];

        var onGetUserWithProductSuccesfull = function(user) {

            $scope.user = user;
            if ($scope.user != "error") {
                $scope.map = {center: {latitude: $scope.user.product.latitude, longitude: $scope.user.product.longitude }, zoom: 16 };
                $scope.marker = {
                    id: 0,
                    coords: {
                        latitude: $scope.user.product.latitude,
                        longitude: $scope.user.product.longitude
                    }
                };
            }
        };

        var onGetUserWithProductError = function(err) {
            console.log(err);
        };

        var productId = $routeParams.id;
        ProductService.byIdUser(productId).then(onGetUserWithProductSuccesfull, onGetUserWithProductError);
    }
}());
/**
 * Created by jonah on 12/23/2015.
 */

(function () {
    'use strict';
    angular.module('swoppr')
        .controller('DetailRentingCtrl', ['$rootScope', '$scope', '$routeParams', 'RentingService', 'ChatService', DetailRentingCtrl]);

    function DetailRentingCtrl($rootScope, $scope, $routeParams, RentingService, ChatService) {
        //renting ophalen
        var onGetRentingSuccesfull = function(renting) {
            if (typeof renting === "string") {
                if (renting == "error") {
                    $scope.whoRents = 'noRenting';
                    return;
                }
            } else if ($rootScope.user.id == renting.renterFrom.id) {
                $scope.whoRents = 'renterFrom';
                $scope.renting = renting;
            } else if ($rootScope.user.id == renting.renterTo.id) {
                $scope.whoRents = 'renterTo';
                $scope.renting = renting;
            } else {
                $scope.whoRents = 'noAccess';
                return;
            }

            var onGetMessagesSuccesfull = function(messages) {
                $scope.messages = messages;
            };

            var onGetMessagesError = function(err) {
                console.log(err);
            };

            ChatService.getMessages(rentingId).then(onGetMessagesSuccesfull, onGetMessagesError);
        };

        //messages ophalen
        var onGetRentingError = function(err) {
            console.log(err);
        };

        var rentingId = $routeParams.id;
        RentingService.byId(rentingId).then(onGetRentingSuccesfull, onGetRentingError);

        var socket = io.connect();

        socket.emit("join renting", rentingId);
        socket.on("broadcast message", function(message) {
            $scope.messages.push(message);
            $scope.$apply();
        });

        //message toeovegen
        $scope.addMessage = function() {
            var newMessage = new Message(
                rentingId,
                $scope.user.id,
                $scope.user.toString(),
                $scope.content,
                Date.now() + 60 * 60000
            );

            var onAddMessageSuccessfull = function(message) {
                $scope.messages.push(message);
                socket.emit("newMessage", {rentid: rentingId, message: message});

                $scope.content = "";
            };

            var onAddMessageError = function(err) {
                console.log(err);
            };

            ChatService.addMessage(newMessage, rentingId).then(onAddMessageSuccessfull, onAddMessageError);
        };

        $scope.validate = function(field) {
            if (field == 1) {
                if ($scope.chat.content.$dirty && $scope.chat.content.$invalid) return 'has-error';
                if ($scope.chat.content.$dirty && $scope.chat.content.$valid) return "has-success";
            }
        };
    }
}());
/**
 * Created by jonah on 12/27/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
        .controller('EditProductCtrl', ['$scope', '$routeParams', '$location', 'ProductService', 'uiGmapGoogleMapApi', EditProductCtrl]);

    function EditProductCtrl($scope, $routeParams, $location, ProductService, GoogleMapApi) {

        $scope.alerts = [];

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };

        $scope.user = [];

        var onGetUserWithProductSuccesfull = function(user) {
            $scope.user = user;
        };

        var onGetUserWithProductError = function(err) {
            console.log(err);
        };

        var productId = $routeParams.id;
        ProductService.byIdUser(productId).then(onGetUserWithProductSuccesfull, onGetUserWithProductError);

        GoogleMapApi.then(function(maps) {
            maps.visualRefresh = true;
            $scope.defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(50.8252383, 3.24815210));

            $scope.map.bounds = {
                northeast: {
                    latitude:$scope.defaultBounds.getNorthEast().lat(),
                    longitude:$scope.defaultBounds.getNorthEast().lng()
                },
                southwest: {
                    latitude:$scope.defaultBounds.getSouthWest().lat(),
                    longitude:-$scope.defaultBounds.getSouthWest().lng()

                }
            };
            $scope.searchbox.options.bounds = new google.maps.LatLngBounds($scope.defaultBounds.getNorthEast(), $scope.defaultBounds.getSouthWest());
        });

        angular.extend($scope, {
            selected: {
                options: {
                    visible:false

                },
                templateurl: '../templates/window.html',
                templateparameter: {}
            },
            map: {
                control: {},
                center: {
                    latitude: 51.052568,
                    longitude: 3.1701058
                },
                zoom: 9,
                dragging: false,
                bounds: {},
                markers: [],
                idkey: 'place_id',
                events: {
                    idle: function (map) {

                    },
                    dragend: function(map) {
                        //update the search box bounds after dragging the map
                        var bounds = map.getBounds();
                        var ne = bounds.getNorthEast();
                        var sw = bounds.getSouthWest();
                        $scope.searchbox.options.bounds = new google.maps.LatLngBounds(sw, ne);
                        //$scope.searchbox.options.visible = true;
                    }
                }
            },
            searchbox: {
                template: '../templates/searchbox.html',
                options: {
                    autocomplete:true,
                    types: ['geocode'],
                    componentRestrictions: {country: 'be'}
                },
                events: {
                    place_changed: function (autocomplete){

                        var place = autocomplete.getPlace();

                        if (place.address_components) {

                            var newMarkers = [];
                            var bounds = new google.maps.LatLngBounds();

                            var marker = {
                                id:place.place_id,
                                place_id: place.place_id,
                                name: place.address_components[0].long_name,
                                latitude: place.geometry.location.lat(),
                                longitude: place.geometry.location.lng(),
                                options: {
                                    visible:false
                                },
                                templateurl:'window.tpl.html',
                                templateparameter: place
                            };

                            newMarkers.push(marker);

                            bounds.extend(place.geometry.location);

                            $scope.map.bounds = {
                                northeast: {
                                    latitude: bounds.getNorthEast().lat(),
                                    longitude: bounds.getNorthEast().lng()
                                },
                                southwest: {
                                    latitude: bounds.getSouthWest().lat(),
                                    longitude: bounds.getSouthWest().lng()
                                }
                            };

                            angular.forEach(newMarkers, function(marker) {
                                //_.each(newMarkers, function(marker) {
                                marker.closeClick = function() {
                                    $scope.selected.options.visible = false;
                                    marker.options.visble = false;

                                    console.log(marker);
                                };
                                marker.onClicked = function() {
                                    $scope.selected.options.visible = false;
                                    $scope.selected = marker;
                                    $scope.selected.options.visible = true;
                                };
                            });

                            $scope.map.markers = newMarkers;

                            $scope.user.product.longitude = newMarkers[0].longitude;
                            $scope.user.product.latitude = newMarkers[0].latitude;
                            $scope.user.product.place =  place.formatted_address;
                        }
                    }
                }
            }
        });

        function successEditProduct(response) {
            if (response.data) {
                if (response.data.ok) {
                    $location.path("/detailProduct/" + response.data.ok);
                }

                if (response.data.error) {
                    $scope.alerts.push({type: 'danger', msg: response.data.error});
                }
            }
        }

        function errorEditProduct(response) {
            console.log(response);
        }

        $scope.editProduct = function(file) {
            ProductService.edit(file, {
                productId: $scope.user.product.id,
                productName: $scope.user.product.productName,
                pricePerDay: $scope.user.product.pricePerDay,
                description: $scope.user.product.description,
                url: $scope.user.product.url,
                publicid: $scope.user.product.publicid,
                place: $scope.user.product.place,
                longitude: $scope.user.product.longitude,
                latitude: $scope.user.product.latitude
            }).then(successEditProduct, errorEditProduct);
        };

        $scope.validate = function(field) {
            if($scope.editProductForm)
                if (field == 1) {
                    if ($scope.editProductForm.productName.$dirty && $scope.editProductForm.productName.$invalid) return 'has-error';
                    if ($scope.editProductForm.productName.$dirty && $scope.editProductForm.productName.$valid) return "has-success";
                } else if (field == 2) {
                    if ($scope.editProductForm.pricePerDay.$dirty && $scope.editProductForm.pricePerDay.$invalid) return 'has-error';
                    if ($scope.editProductForm.pricePerDay.$dirty && $scope.editProductForm.pricePerDay.$valid) return "has-success";
                }  else if (field == 3) {
                    if ($scope.editProductForm.description.$dirty && $scope.editProductForm.description.$invalid) return 'has-error';
                    if ($scope.editProductForm.description.$dirty && $scope.editProductForm.description.$valid) return "has-success";
                } else if (field == 4) {
                    if ($scope.editProductForm.picture.$dirty && $scope.editProductForm.picture.$invalid) return 'has-error';
                    if ($scope.editProductForm.picture.$dirty && $scope.editProductForm.picture.$valid) return "has-success";
                }  else if (field == 5) {
                    if ($scope.editProductForm.location.$valid) return "has-success";
                }
        };
    }
}());
/**
 * Created by jonah on 12/26/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('EditRentingCtrl', ['$rootScope', '$scope', '$routeParams', '$location', 'RentingService', EditRentingCtrl]);

    function EditRentingCtrl($rootScope, $scope, $routeParams, $location, RentingService) {

        $scope.alerts = [];

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };

        var onGetRentingSuccesfull = function(renting) {
            if (typeof renting === "string") {
                if (renting == "error") {
                    $scope.whoRents = 'noRenting';
                    return;
                }
            //renterFrom kan verhuring niet bewerken
            } else if ($rootScope.user.id == renting.renterFrom.id) {
                $scope.whoRents = 'noAccess';
                return;
            } else if ($rootScope.user.id == renting.renterTo.id) {

                $scope.whoRents = 'renterTo';
                $scope.renting = renting;

                $scope.$watch('renting.fromDate', function() {
                    $scope.setMinDates();

                    if($scope.renting.fromDate >= $scope.renting.toDate) {
                        $scope.renting.toDate = new Date($scope.renting.fromDate);
                        $scope.renting.toDate.setDate($scope.renting.toDate.getDate() +1);
                    }

                    $scope.renting.fromDate.status = {
                        opened: false
                    };

                    $scope.renting.fromDate.open = function($event) {
                        $scope.renting.fromDate.status.opened = true;
                    };

                    $scope.setDaysToRent();
                });

                $scope.$watch('renting.toDate', function() {
                    $scope.setMinDates();

                    $scope.renting.toDate.open = function($event) {
                        $scope.renting.toDate.status.opened = true;
                    };

                    $scope.renting.toDate.status = {
                        opened: false
                    };

                    $scope.setDaysToRent();
                });

                $scope.setMinDates = function() {
                    $scope.renting.fromDate.minDate = new Date();

                    $scope.renting.toDate.minDate = new Date($scope.renting.fromDate);
                    $scope.renting.toDate.minDate.setDate($scope.renting.toDate.minDate.getDate() +1);
                };

                $scope.dateOptions = {
                    formatYear: 'yy',
                    startingDay: 1
                };

                $scope.format = 'dd/MM/yyyy';

                $scope.$watch('renting.renterFrom', function() {
                    $scope.setDaysToRent();
                });

                $scope.setDaysToRent = function() {
                    var oneDay = 24*60*60*1000;
                    $scope.renting.daysToRent = Math.round(Math.abs(($scope.renting.fromDate.getTime() - $scope.renting.toDate.getTime())/(oneDay)));

                    if ($scope.renting.renterFrom.product) $scope.renting.totalPrice = $scope.renting.renterFrom.product.pricePerDay * $scope.renting.daysToRent;
                };

            } else {
                $scope.whoRents = 'noAccess';
                return;
            }
        };

        //messages ophalen
        var onGetRentingError = function(err) {
            console.log(err);
        };

        var rentingId = $routeParams.id;
        RentingService.byId(rentingId).then(onGetRentingSuccesfull, onGetRentingError);

        var onAddRentingSuccessfull = function(resp) {
            if (resp.data) {
                if (resp.data.ok) {
                    $location.path('/detailRenting/' + resp.data.ok._id);
                }
                if (resp.data.error) {
                    $scope.alerts.push({type: 'danger', msg: resp.data.error});
                }
            }
        };

        var onAddRentingError = function(err) {
            console.log(err);
        };

        $scope.editRenting = function() {

            if ($rootScope.user && $scope.renting) {
                var renting = new Renting(
                    $scope.renting.id,
                    $scope.renting.renterFrom.id,
                    $scope.renting.renterTo.id,
                    $scope.renting.renterFrom.product.id,
                    $scope.renting.fromDate,
                    $scope.renting.toDate,
                    $scope.renting.daysToRent,
                    $scope.renting.totalPrice
                );

                RentingService.edit(renting).then(onAddRentingSuccessfull, onAddRentingError);
            }
        };
    }
}());
/**
 * Created by jonah on 11/14/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('IndexCtrl', ['$scope', IndexCtrl]);

    function IndexCtrl ($scope) {
        $scope.fadeIn = function ($el) {
            animate($el, "fadeIn");
        };

        $scope.fadeInUp = function ($el) {
            animate($el, "fadeInUp");
        };

        $scope.fadeInLeft = function ($el) {
            animate($el, "fadeInLeft");
        };

        $scope.fadeInRight = function ($el) {
            animate($el, "fadeInRight");
        };

        $scope.zoomIn = function ($el) {
            animate($el, "zoomIn");
        };
    }
}());

function animate($el, animation) {
    $el.removeClass('hide-for-animation');
    $el.addClass('animated ' + animation);
}
/**
 * Created by jonah on 11/21/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('LoginCtrl', ['$rootScope', '$scope', 'UserService', LoginCtrl]);

    function LoginCtrl ($rootScope, $scope, UserService) {

        $scope.alerts = [];

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };

        $scope.login = function() {

            function successLogin(response) {
                if (response.data) {
                    if (response.data.error) {
                        $scope.alerts.push({type: 'danger', msg: response.data.error});
                    }
                }

                function successUserData(data) {
                    $rootScope.user = data;
                }

                function errorUserData(data) {
                    console.log(data);
                }

                UserService.userData().then(successUserData, errorUserData);
            }
            function errorLogin(response) {
                console.log(response);
            }

            UserService.login({email: this.email, password: this.password}).then(successLogin, errorLogin);
        };

        $scope.validate = function(field) {
            if (field == 1) {
                if ($scope.loginForm.email.$dirty && $scope.loginForm.email.$invalid) return 'has-error';
                if ($scope.loginForm.email.$dirty && $scope.loginForm.email.$valid) return "has-success";
            } else if (field == 2) {
                if ($scope.loginForm.password.$dirty && $scope.loginForm.password.$invalid) return 'has-error';
                if ($scope.loginForm.password.$dirty && $scope.loginForm.password.$valid) return "has-success";
            }
        };
    }
}());
/**
 * Created by jonah on 12/26/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
            .controller('ModalInstanceCtrl', ['$rootScope', '$scope', '$uibModalInstance', '$filter', 'RentingService', 'ProductService', 'id', 'product', 'who', ModalInstanceCtrl]);

    function ModalInstanceCtrl($rootScope, $scope, $uibModalInstance, $filter, RentingService, ProductService, id, product, who) {

        if (who == "product") {
            $scope.title = "Verwijderen product";
            $scope.message = "Bent u zeker dat u het artikel " + product + " wilt verwijderen?";
        } else if (who == "renting.renterFrom" || who == "renting.renterTo") {
            $scope.title = "Verwijderen verhuring";
            $scope.message = "Bent u zeker dat u de verhuring voor het artikel " + product + " wilt verwijderen?";
        }

        $scope.delete = function () {
            function RemoveProductSuccessfull(response) {
                if (response.data.ok) {
                    var productToDelete;
                    productToDelete = $filter('filter')($rootScope.user.products, function(r) {
                        return r.id === response.data.ok;
                    })[0];
                    var indexProductToDelete = $rootScope.user.products.indexOf(productToDelete);

                    $rootScope.user.products[indexProductToDelete].isDeleted = true;
                }

                if (response.data.error) {
                    console.log(response.data.error);
                }
            }

            function RemoveProductError(response) {
                console.log(response);
            }

            function RemoveRentingSuccessfull(response) {

                if (response.data.ok) {
                    var rentingToDelete;
                    var indexRentingToDelete;

                    //kijken uit welke $rootScope de renting verwijderd moet worden
                    if (who == "renting.renterFrom") {
                        rentingToDelete = $filter('filter')($rootScope.rentingsRenterFrom, function(r) {
                            return r.id === response.data.ok;
                        })[0];
                        indexRentingToDelete = $rootScope.rentingsRenterTo.indexOf(rentingToDelete);

                        $rootScope.rentingsRenterFrom.splice(indexRentingToDelete, 1);

                    } else if (who == "renting.renterTo") {
                        rentingToDelete = $filter('filter')($rootScope.rentingsRenterTo, function(r) {
                            return r.id === response.data.ok;
                        })[0];
                        indexRentingToDelete = $rootScope.rentingsRenterTo.indexOf(rentingToDelete);

                        $rootScope.rentingsRenterTo.splice(indexRentingToDelete, 1);
                    }
                }

                if (response.data.error) {
                    console.log(response.data.error);
                }
            }

            function RemoveRentingError(response) {
                console.log(response);
            }

            if (who == "product") {
                ProductService.remove(id).then(RemoveProductSuccessfull, RemoveProductError);
            } else if (who == "renting.renterFrom" || who == "renting.renterTo") {
                RentingService.remove(id).then(RemoveRentingSuccessfull, RemoveRentingError);
            }

            $uibModalInstance.close();
        };

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
}());
/**
 * Created by jonah on 12/27/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
        .controller('MyProductsCtrl', ['$rootScope', '$scope', '$uibModal', 'UserService', MyProductsCtrl]);

    function MyProductsCtrl($rootScope, $scope, $uibModal, UserService) {

        $scope.sortType = "productName";

        $rootScope.user.products = "loading";

        function succesUserData(data) {
            if (data) {
                if (data.error) {
                    $rootScope.user.products = "";
                } else {
                    $rootScope.user.products = data.products;
                }
            }
        }

        function errorUserData(response) {
            console.log(response);
        }

        UserService.userData().then(succesUserData, errorUserData);

        $rootScope.$watch('user', function() {
            if ($rootScope.user) {
                $scope.animationsEnabled = true;

                $scope.open = function (id, product, who) {
                    var modalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        templateUrl: '../templates/myModalContent.html',
                        controller: 'ModalInstanceCtrl',
                        resolve: {
                            id: function () {
                                return id;
                            },
                            product: function() {
                                return product;
                            },
                            who: function() {
                                return who;
                            }
                        }
                    });
                };
            }
        });
    }
}());
/**
 * Created by jonah on 12/25/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
        .controller('MyRentingsCtrl', ['$rootScope', '$scope', '$uibModal', 'RentingService', MyRentingsCtrl]);

    function MyRentingsCtrl($rootScope, $scope, $uibModal, RentingService) {
        $rootScope.rentingsRenterFrom = "loading";
        $rootScope.rentingsRenterTo = "loading";

        $scope.sortType1 = "renterFrom.product.productName";
        $scope.sortType2 = "renterFrom.product.productName";

        $rootScope.$watch('user', function() {
            if ($rootScope.user) {
                var getRentingsByRenterFromSuccessfull = function(renting) {
                    $rootScope.rentingsRenterFrom = renting;
                };

                var getRentingsByRenterFromError = function(err) {
                    console.log(err);
                };

                RentingService.byRenterFrom($rootScope.user.id).then(getRentingsByRenterFromSuccessfull, getRentingsByRenterFromError);

                var getRentingsByRenterToSuccessfull = function(renting) {
                    $rootScope.rentingsRenterTo = renting;

                };

                var getRentingsByRenterToError = function(err) {
                    console.log(err);
                };

                RentingService.byRenterTo($rootScope.user.id).then(getRentingsByRenterToSuccessfull, getRentingsByRenterToError);

                $scope.animationsEnabled = true;

                $scope.open = function (id, product, who) {
                    var modalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        templateUrl: '../templates/myModalContent.html',
                        controller: 'ModalInstanceCtrl',
                        resolve: {
                            id: function () {
                                return id;
                            },
                            product: function() {
                                return product;
                            },
                            who: function() {
                                return who;
                            }
                        }
                    });
                };
            }
        });
    }
}());
/**
 * Created by jonah on 11/14/2015.
 */
(function () {
    'use strict';

    angular.module('swoppr')
        .controller('NavbarCtrl', ['$scope', '$location', NavbarCtrl]);

    function NavbarCtrl($scope, $location) {
        //https://jsfiddle.net/xv7tws10/5/
        $scope.isCollapsed = true;

        //http://stackoverflow.com/questions/12592472/how-to-highlight-a-current-menu-item
        $scope.getClass = function (path) {
            if ($location.path() === path) {
                return 'active';
            } else {
                return '';
            }
        };
    }
}());
/**
 * Created by jonah on 12/4/2015.
 */

(function () {
    'use strict';
    angular.module('swoppr')
        .controller('PlaceProductCtrl', ['$rootScope', '$scope', '$location', 'ProductService', 'uiGmapGoogleMapApi', PlaceProductCtrl]);

    function PlaceProductCtrl ($rootScope, $scope, $location, ProductService, GoogleMapApi) {
        $scope.alerts = [];

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };

        GoogleMapApi.then(function(maps) {
            maps.visualRefresh = true;
            $scope.defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(50.8252383, 3.24815210));


            $scope.map.bounds = {
                northeast: {
                    latitude:$scope.defaultBounds.getNorthEast().lat(),
                    longitude:$scope.defaultBounds.getNorthEast().lng()
                },
                southwest: {
                    latitude:$scope.defaultBounds.getSouthWest().lat(),
                    longitude:-$scope.defaultBounds.getSouthWest().lng()

                }
            };
            $scope.searchbox.options.bounds = new google.maps.LatLngBounds($scope.defaultBounds.getNorthEast(), $scope.defaultBounds.getSouthWest());
        });

        angular.extend($scope, {
            selected: {
                options: {
                    visible:false

                },
                templateurl: '../templates/window.html',
                templateparameter: {}
            },
            map: {
                control: {},
                center: {
                    latitude: 51.052568,
                    longitude: 3.1701058
                },
                zoom: 9,
                dragging: false,
                bounds: {},
                markers: [],
                idkey: 'place_id',
                events: {
                    idle: function (map) {

                    },
                    dragend: function(map) {
                        //update the search box bounds after dragging the map
                        var bounds = map.getBounds();
                        var ne = bounds.getNorthEast();
                        var sw = bounds.getSouthWest();
                        $scope.searchbox.options.bounds = new google.maps.LatLngBounds(sw, ne);
                        //$scope.searchbox.options.visible = true;
                    }
                }
            },
            searchbox: {
                template: '../templates/searchbox.html',
                options: {
                    autocomplete:true,
                    types: ['geocode'],
                    componentRestrictions: {country: 'be'}
                },
                events: {
                    place_changed: function (autocomplete){

                        var place = autocomplete.getPlace();

                        if (place.address_components) {

                            var newMarkers = [];
                            var bounds = new google.maps.LatLngBounds();

                            var marker = {
                                id:place.place_id,
                                place_id: place.place_id,
                                name: place.address_components[0].long_name,
                                latitude: place.geometry.location.lat(),
                                longitude: place.geometry.location.lng(),
                                options: {
                                    visible:false
                                },
                                templateurl:'window.tpl.html',
                                templateparameter: place
                            };

                            newMarkers.push(marker);

                            bounds.extend(place.geometry.location);

                            $scope.map.bounds = {
                                northeast: {
                                    latitude: bounds.getNorthEast().lat(),
                                    longitude: bounds.getNorthEast().lng()
                                },
                                southwest: {
                                    latitude: bounds.getSouthWest().lat(),
                                    longitude: bounds.getSouthWest().lng()
                                }
                            };

                            angular.forEach(newMarkers, function(marker) {
                                //_.each(newMarkers, function(marker) {
                                marker.closeClick = function() {
                                    $scope.selected.options.visible = false;
                                    marker.options.visble = false;

                                    console.log(marker);
                                };
                                marker.onClicked = function() {
                                    $scope.selected.options.visible = false;
                                    $scope.selected = marker;
                                    $scope.selected.options.visible = true;
                                };
                            });

                            $scope.map.markers = newMarkers;
                            $scope.place =  place.formatted_address;
                        }
                    }
                }
            }
        });

        function successAddProduct(response) {
            if (response.data) {
                if (response.data.ok) {
                    $rootScope.user.products.push(response.data.ok);
                    $location.path("/detailProduct/" + response.data.ok._id);
                }

                if (response.data.error) {
                    $scope.alerts.push({type: 'danger', msg: response.data.error});
                }
            }
        }

        function errorAddProduct(response) {
            console.log(response);
        }


        $rootScope.$watch("user", function() {
            if ($rootScope.user) {
                $scope.addProduct = function(file) {
                    ProductService.add(file, {
                        userId: $rootScope.user.id,
                        productName: $scope.productName,
                        pricePerDay: $scope.pricePerDay,
                        description: $scope.description,
                        place: $scope.place,
                        longitude: $scope.map.markers[0].longitude,
                        latitude: $scope.map.markers[0].latitude
                    }).then(successAddProduct, errorAddProduct);
                };
            }
        });

        $scope.validate = function(field) {

            if($scope.placeProductForm)

            if (field == 1) {
                if ($scope.placeProductForm.productName.$dirty && $scope.placeProductForm.productName.$invalid) return 'has-error';
                if ($scope.placeProductForm.productName.$dirty && $scope.placeProductForm.productName.$valid) return "has-success";
            } else if (field == 2) {
                if ($scope.placeProductForm.pricePerDay.$dirty && $scope.placeProductForm.pricePerDay.$invalid) return 'has-error';
                if ($scope.placeProductForm.pricePerDay.$dirty && $scope.placeProductForm.pricePerDay.$valid) return "has-success";
            }  else if (field == 3) {
                if ($scope.placeProductForm.description.$dirty && $scope.placeProductForm.description.$invalid) return 'has-error';
                if ($scope.placeProductForm.description.$dirty && $scope.placeProductForm.description.$valid) return "has-success";
            } else if (field == 4) {
                if ($scope.placeProductForm.picture.$dirty && $scope.placeProductForm.picture.$invalid) return 'has-error';
                if ($scope.placeProductForm.picture.$dirty && $scope.placeProductForm.picture.$valid) return "has-success";
            }  else if (field == 5) {
                if ($scope.placeProductForm.place.$valid) return "has-success";
            }
        };
    }
}());
/**
 * Created by jonah on 11/21/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('RegisterCtrl', ['$rootScope', '$scope', 'UserService', RegisterCtrl]);

    function RegisterCtrl ($rootScope, $scope, UserService) {

        $scope.alerts = [];

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };

        $scope.register = function() {

            function succesRegister(response) {
                if (response.data) {
                    if (response.data.error) {
                        $scope.alerts.push({type: 'danger', msg: response.data.error});
                    }
                }

                function successUserData(data) {
                    $rootScope.user = data;
                }

                function errorUserData(err) {
                    console.log(err);
                }

                UserService.userData().then(successUserData, errorUserData);
            }

            function errorRegister(response) {
                console.log(response);
            }

            UserService.register({
                firstname: this.firstname,
                surname: this.surname,
                email: this.email,
                password: this.password
            }).then(succesRegister, errorRegister);
        };

        $scope.validate = function(field) {
            if (field == 1) {
                if ($scope.registerForm.firstname.$dirty && $scope.registerForm.firstname.$invalid) return 'has-error';
                if ($scope.registerForm.firstname.$dirty && $scope.registerForm.firstname.$valid) return "has-success";
            } else if (field == 2) {
                if ($scope.registerForm.surname.$dirty && $scope.registerForm.surname.$invalid) return 'has-error';
                if ($scope.registerForm.surname.$dirty && $scope.registerForm.surname.$valid) return "has-success";
            }  else if (field == 3) {
                if ($scope.registerForm.email.$dirty && $scope.registerForm.email.$invalid) return 'has-error';
                if ($scope.registerForm.email.$dirty && $scope.registerForm.email.$valid) return "has-success";
            } else if (field == 4) {
                if ($scope.registerForm.password.$dirty && $scope.registerForm.password.$invalid) return 'has-error';
                if ($scope.registerForm.password.$dirty && $scope.registerForm.password.$valid) return "has-success";
            }  else if (field == 5) {
                if ($scope.registerForm.passwordAgain.$dirty && $scope.registerForm.passwordAgain.$invalid) return 'has-error';
                if ($scope.registerForm.passwordAgain.$dirty && $scope.registerForm.passwordAgain.$valid) return "has-success";
            }
        };
    }
}());
/**
 * Created by jonah on 12/19/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('RentProductCtrl', ['$rootScope', '$scope', '$routeParams', '$location', 'ProductService', 'RentingService', RentProductCtrl]);

    function RentProductCtrl($rootScope, $scope, $routeParams, $location, ProductService, RentingService) {

        $scope.alerts = [];

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };

        $scope.user = [];

        var productId = $routeParams.id;
        var onGetUserWithProductSuccesfull = function(data) {

            if ($rootScope.user.id == data.id) {
                $scope.ownProduct = productId;
            } else if (data.product) {
                if (data.product.isDeleted === true) {
                    $scope.user = "deleted";
                } else {
                    $scope.user = data;
                }
            } else {
                $scope.user = data;
            }
        };

        var onGetUserWithProductError = function(err) {
            console.log(err);
        };

        ProductService.byIdUser(productId).then(onGetUserWithProductSuccesfull, onGetUserWithProductError);

        $scope.setDates = function() {
            $scope.dt1 = new Date();
            $scope.dt2 = new Date($scope.dt1.getDate() +1);
        };

        $scope.setDates();

        $scope.$watch('dt1', function() {
            $scope.setMinDates();

            if($scope.dt1 >= $scope.dt2) {
                $scope.dt2 = new Date($scope.dt1);
                $scope.dt2.setDate($scope.dt2.getDate() +1);
            }

            $scope.dt1.status = {
                opened: false
            };

            $scope.dt1.open = function($event) {
                $scope.dt1.status.opened = true;
            };

            $scope.setDaysToRent();
        });

        $scope.$watch('dt2', function() {
            $scope.setMinDates();

            $scope.dt2.open = function($event) {
                $scope.dt2.status.opened = true;
            };

            $scope.dt2.status = {
                opened: false
            };

            $scope.setDaysToRent();
        });

        $scope.setMinDates = function() {
            $scope.dt1.minDate = new Date();

            $scope.dt2.minDate = new Date($scope.dt1);
            $scope.dt2.minDate.setDate($scope.dt2.minDate.getDate() +1);
        };

        $scope.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        $scope.format = 'dd/MM/yyyy';

        $scope.$watch('user', function() {
            $scope.setDaysToRent();
        });

        $scope.setDaysToRent = function() {
            var oneDay = 24*60*60*1000;
            $scope.daysToRent = Math.round(Math.abs(($scope.dt1.getTime() - $scope.dt2.getTime())/(oneDay)));

            if ($scope.user.product) $scope.totalPrice = $scope.user.product.pricePerDay * $scope.daysToRent;
        };

        var onAddRentingSuccessfull = function(resp) {
            if (resp.data) {
                if (resp.data.ok) {
                    $location.path('/detailRenting/' + resp.data.ok._id);
                }
                if (resp.data.error) {
                    $scope.alerts.push({type: 'danger', msg: resp.data.error});
                }
            }
        };

        var onAddRentingError = function(err) {
            console.log(err);
        };

        $scope.rentProduct = function() {
            if ($rootScope.user && $scope.user) {
                var renting = new Renting();
                renting.renterFrom = $scope.user.id;
                renting.renterTo = $rootScope.user.id;
                renting.productId = $scope.user.product.id;
                renting.fromDate = $scope.dt1;
                renting.toDate = $scope.dt2;
                renting.daysToRent = $scope.daysToRent;
                renting.totalPrice = $scope.totalPrice;

                RentingService.add(renting).then(onAddRentingSuccessfull, onAddRentingError);
            }
        };
    }
}());
/**
 * Created by Greg on 04-Dec-15.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .controller('ServiceTesterCtrl', ['$scope', 'ProductService', 'RentingService', 'UserService', ServiceTesterCtrl]);

    function ServiceTesterCtrl ($scope, ProductService, RentingService, UserService) {
        var productId = "566c664944382cb42f5edd4b";
        var productId2 = "5661da9afd0fbe340fcf50fe";
        var productToDeleteId = "5661e0a474c36f0c277234cb";
        var idUser = "565df548facad7f403384e3b";
        var idUser2 = "5661b52d37012fe41ebdaa05";
        var rentingId = "5661ec44fa9bebbc01a39e73";

        //Products
        $scope.ProductsAll = ProductService.all();
        $scope.ProductsById = ProductService.byId(productId);
        $scope.ProductsByIdUser = ProductService.byIdUser(productId);
        //var newProduct = new Product("test", 5, "description", Date.now());
        //ProductService.add(userId, newProduct);
        //ProductService.remove(productToDeleteId);

        //Users
        $scope.UsersAll = UserService.all();
        $scope.UserById = UserService.byId(idUser);
        $scope.UsersAllWithProducts = UserService.AllWithProducts();

        //add niet nodig?
        //var u = new User("Den Boss", "Jos","josdenboss@hotmail.com", null, Date.now());
        //UserService.add(u);




        //Rentings
        $scope.RentingsById = RentingService.byId(rentingId);
        $scope.RentingsByUser = RentingService.byUser(idUser);
        $scope.RentingsByRenter = RentingService.byRenter(idUser2);
        $scope.RentingsByProduct = RentingService.byProduct(productId);


        //var r = new Renting(idUser, idUser2, productId, 1);
        //RentingService.add(r);
        //var r2 = new Renting(idUser2, idUser, productId2, 1);
        //RentingService.add(r2);
    }
}());
/**
 * Created by jonah on 12/12/2015.
 */

(function () {
    'use strict';
    angular.module('swoppr')
        .controller('ToRentCtrl', ['$scope', 'ProductService', ToRentCtrl]);

    function ToRentCtrl($scope, ProductService) {
        $scope.sortProperty = "pricePerDay";

        var onGetProductsSuccesfull = function(response) {
            $scope.products = response;
        };

        var onGetProductsError = function(err) {
            console.log(err);
        };

        ProductService.all().then(onGetProductsSuccesfull, onGetProductsError);
    }
}());
/**
 * Created by jonah on 12/12/2015.
 */

(function () {
    'use strict';
    angular.module('swoppr')
        .controller('WindowCtrl', ['$scope', WindowCtrl]);

    function WindowCtrl($scope) {
        $scope.place = {};
        $scope.showPlaceDetails = function(param) {
            $scope.place = param;
        };
    }
}());
//Deze module aangepast naar eigen wens: https://www.npmjs.com/package/angular-scroll-animate
(function () {
    'use strict';

    angular.module('angular-scroll-animate', []).directive('whenVisible', ['$document', '$window',
        function($document, $window) {

            var determineWhereElementIsInViewport =
                function($el, viewportHeight, whenVisibleFn, delayPercent, scope) {

                    var elementBounds = $el[0].getBoundingClientRect();

                    //var panelTop = elementBounds.top;
                    var panelBottom = elementBounds.bottom;

                    // pixel buffer until deciding to show the element
                    var delayPx = delayPercent * elementBounds.height;

                    var bottomVisible = (panelBottom - delayPx > 0) && (panelBottom < viewportHeight);
                    //var topVisible = (panelTop + delayPx <= viewportHeight) && (panelTop > 0);

                    if ($el.data('hidden') && bottomVisible) {
                        whenVisibleFn($el, scope);
                        $el.data('hidden', false);
                    }

                    /*// scrolled out from scrolling down or up
                     else if (!($el.data('hidden')) && (panelBottom < 0 || panelTop > viewportHeight)) {
                     whenNotVisibleFn($el, scope);
                     $el.data('hidden', true);
                     }*/
                };

            return {
                restrict: 'A',
                scope: {
                    whenVisible: '&',
                    delayPercent: '=?'
                },

                controller: ['$scope', function(scope) {
                    if (!scope.whenVisible || !angular.isFunction(scope.whenVisible())) {
                        throw new Error('Directive: angular-scroll-animate \'when-visible\' attribute must specify a function.');
                    }

                    /*if (scope.whenNotVisible && !angular.isFunction(scope.whenNotVisible())) {
                     throw new Error('Directive: angular-scroll-animate \'when-not-visible\' attribute must specify a function.');
                     }*/

                    if (scope.delayPercent) {

                        var delayPercent = parseFloat(scope.delayPercent);

                        if ((Number.isNaN(delayPercent)) || (delayPercent < 0 || delayPercent > 1)) {
                            throw new Error('Directive: angular-scroll-animate \'delay-percent\' attribute must be a decimal fraction between 0 and 1.');
                        }
                    }
                }],

                link: function(scope, el, attributes) {

                    var delayPercent = attributes.delayPercent || 0.25; // lower = more eager to hide / show, higher = less eager

                    var onScroll = function() {

                        var document = $document[0].documentElement;
                        var viewportHeight = document.clientHeight;

                        determineWhereElementIsInViewport(el, viewportHeight,
                            scope.whenVisible(), delayPercent, scope);
                    };

                    var unbindDocumentEvents = $document.on('scroll', onScroll);
                    var unbindWindowEvents = angular.element($window).on('resize orientationchange', onScroll);

                    /*scope.$on('$destroy', unbindDocumentEvents);
                     scope.$on('$destroy', unbindWindowEvents);*/

                    // initialise
                    el.data('hidden', true);
                    scope.$evalAsync(onScroll);
                }
            };
        }]);

}());
/**
 * Created by jonah on 11/28/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .directive('compareTo', compareToDir);

    function compareToDir () {
        return {
            require: "ngModel",
            scope: {
                otherModelValue: "=compareTo"
            },
            link: function(scope, element, attributes, ngModel) {

                ngModel.$validators.compareTo = function(modelValue) {
                    return modelValue == scope.otherModelValue;
                };
                scope.$watch("otherModelValue", function() {
                    ngModel.$validate();
                });
            }
        };
    }
}());
/**
 * Created by jonah on 11/21/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .directive('logout', ['$rootScope', 'UserService', logoutDir]);

    function logoutDir ($rootScope, UserService) {
        return {
            restrict: 'A',
            link: function(scope, element) {
                element.on('click', function(e) {
                    e.preventDefault();

                    function successLogout(response) {
                        $rootScope.user = "";
                    }

                    function errorLogout(response) {
                        console.log(response);
                    }

                    UserService.logout().then(successLogout, errorLogout);
                });
            }
        };
    }
}());
/**
 * Created by jonah on 12/18/2015.
 */
(function() {
    "use strict";

    angular.module("swoppr")
        .directive("productforrent", productDir);

    function productDir() {
        return {
            restrict: 'E',
            templateUrl: '../templates/product.html'
        };
    }
})();
/**
 * Created by jonah on 11/21/2015.
 */
(function () {
    'use strict';
    angular.module('swoppr')
        .directive('redir', redirDir);

    function redirDir() {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                element.on('click', function(e) {
                    e.preventDefault();
                    window.location = attrs.href;
                });
            }
        };
    }
}());
/**
 * Created by jonah on 12/9/2015.
 */
(function() {
    angular.module('httpFactory', [])
        .factory('myHttpResponseInterceptor',['$q','$location',function($q,$location){
            return {
                response: function(response) {
                    if (typeof response.data === 'object') {
                        if (response.data.redirect) {
                            $location.path(response.data.redirect);
                            return {} || $q.when(response);
                        }
                    }
                    return response || $q.when(response);
                }
            };
        }])
        .config(['$httpProvider', function($httpProvider) {
            $httpProvider.interceptors.push('myHttpResponseInterceptor');
        }]);
})();
/**
 * Created by jonah on 12/24/2015.
 */
(function(){
    "use strict";

    var MessageService = function($http) {

        var getMessages = function(rentingId) {
            var url = '/api/chat/' + rentingId;
            return $http.get(url).then(function(response) {
                if (response.data.error) {
                    return "error";
                }

                var messages = [];
                angular.forEach(response.data.ok, function(m) {
                    var msg = new Message(
                        m._renting,
                        m._sender,
                        m.name,
                        m.content,
                        m.createdOn
                    );
                    messages.push(msg);
                });

                return messages;
            });
        };

        var addMessage = function(message, rentingId) {
            var url = '/api/chat/' + rentingId;
            return $http.post(url, message).then(function(response) {
                if (response.data.error) {
                    return "error";
                }

                var m = response.data.ok;
                var msg = new Message(
                    m._renting,
                    m._sender,
                    m.name,
                    m.content,
                    m.createdOn
                );

                return msg;
            });
        };

        return {
            getMessages: getMessages,
            addMessage : addMessage
        };
    };
    angular.module("swoppr").factory("ChatService", ["$http", MessageService]);
})();
/**
 * Created by Greg on 24-Nov-15.
 */
(function(){
    "use strict";
    var ProductService = function($http, Upload) {

        function makeProduct(p) {
            var url = p.url ? p.url : '/';

            return new Product(
                p._id,
                p.productName,
                p.pricePerDay,
                p.description,
                url,
                p.publicid,
                p.place,
                p.longitude,
                p.latitude,
                p.isDeleted
            );
        }

        var byId = function(id){
            var url =   '/api/product/getById/'+id;
            return $http.get(url).then(function(response) {
                if(response.data.error) {
                    return "error";
                }

                var p = response.data.ok;
                return new Product(
                    p.productName,
                    p.pricePerDay,
                    p.description,
                    p.createdOn
                );
            });
        };

        var byIdUser = function(productId){
            var url = '/api/product/getByIdUser/' + productId;
            return $http.get(url).then(function(response) {

                if(response.data.error) {
                    return "error";
                }

                var p = response.data.ok.product;
                var product = makeProduct(p);

                var u = response.data.ok;
                return new UserWithoutCredentials(
                    u._id,
                    u.firstname,
                    u.surname,
                    u.local.email,
                    product
                );
            });
        };

        var all = function(){
            var url = '/api/product/getAll/';
            return $http.get(url).then(function(response) {
                if(response.data.error) {
                    return "error";
                }

                var products = [];
                angular.forEach(response.data.ok, function(p){
                    if (p.isDeleted === false) {
                        var product = makeProduct(p);
                        products.push(product);
                    }
                });
                return products;
            });
        };

        var add = function(file, data) {
            var url = '/api/product/newProduct/';
            if (file) {
                var uploader = file.upload = Upload.upload({
                    url: url,
                    file: file,
                    data: data
                }).then(function(response) {
                    return response;
                });
                return uploader;
            } else {
                return $http.post(url, data).then(function(response) {
                    return response;
                });
            }
        };

        var edit = function(file, data) {
            var url = '/api/product/editProduct/';
            if (file) {
                var uploader = file.upload = Upload.upload({
                    url: url,
                    file: file,
                    data: data
                }).then(function(response) {
                    return response;
                });
                return uploader;
            } else {
                return $http.post(url, data).then(function(response) {
                    return response;
                });
            }
        };

        var remove = function(id){
            var url =  '/api/product/removeById/'+id;
            return $http.get(url).then(function(response) {
                return response;
            });
        };

        return {
            byId : byId,
            byIdUser : byIdUser,
            all : all,
            add : add,
            edit : edit,
            remove : remove
        };
    };
    angular.module("swoppr").factory("ProductService", ["$http", "Upload", ProductService]);
})();
/**
 * Created by Greg on 24-Nov-15.
 */
(function(){
    "use strict";

    var RentingService = function($http){
        function makeProduct(p) {
            return new Product(
                p._id,
                p.productName,
                parseInt(p.pricePerDay),
                p.description,
                p.url,
                p.publicid,
                p.place,
                p.longitude,
                p.latitude,
                p.isDeleted
            );
        }

        function makeRenterFrom(rf, product) {
            return new UserWithoutCredentials(
                rf._id,
                rf.firstname,
                rf.surname,
                rf.local.email,
                product
            );
        }

        function makeRenterTo(rt) {
            return new UserWithoutCredentials(
                rt._id,
                rt.firstname,
                rt.surname,
                rt.local.email
            );
        }

        function makeRenting(r, renterFrom, renterTo) {
           return new RentingWithUsers (
                r._id,
                renterFrom,
                renterTo,
                new Date(r.fromDate),
                new Date(r.toDate),
                parseInt(r.daysToRent),
                parseInt(r.totalPrice)
            );
        }

        var byId = function(id){
            var url = '/api/renting/getById/'+id;
            return $http.get(url).then(function(response) {

                if(response.data.error) {
                    return "error";
                }

                var data = response.data.ok;

                var p = data.renterFrom.product;
                var product = makeProduct(p);

                var rf = data.renterFrom;
                var renterFrom = makeRenterFrom(rf, product);

                var rt = data.renterTo;
                var renterTo = makeRenterTo(rt);

                var r = data;
                return makeRenting(r, renterFrom, renterTo);
            });
        };

        var byRenterFrom = function(userId) {
            var url =   '/api/renting/getAllRentingsRenterFrom/'+userId;
            return $http.get(url).then(function(response) {
                if(response.data.error) {
                    return "error";
                }

                var rentings = [];
                angular.forEach(response.data.ok, function(r){
                    var p = r.renterFrom.product;
                    var product = makeProduct(p);

                    var rf = r.renterFrom;
                    var renterFrom = makeRenterFrom(rf, product);

                    var rt = r.renterTo;
                    var renterTo = makeRenterTo(rt);
                    rentings.push(makeRenting(r, renterFrom, renterTo));
                });
                return rentings;
            });
        };

        var byRenterTo = function(userId){
            var url =   '/api/renting/getAllRentingsRenterTo/'+userId;
            return $http.get(url).then(function(response) {
                if(response.data.error) {
                    return "error";
                }

                var rentings = [];
                angular.forEach(response.data.ok, function(r){
                    var p = r.renterFrom.product;
                    var product = makeProduct(p);

                    var rf = r.renterFrom;
                    var renterFrom = makeRenterFrom(rf, product);

                    var rt = r.renterTo;
                    var renterTo = makeRenterTo(rt);
                    rentings.push(makeRenting(r, renterFrom, renterTo));
                });
                return rentings;
            });
        };

        /*var byProduct = function(id){
            var url =   '/api/renting/getAllRentingsProduct/' + id;
            return $http.get(url).then(function(response) {
                if(response.data.error) {
                    return "error";
                }

                var rentings = [];
                angular.forEach(response.data, function(r){
                    var renting = new Renting(
                        r.renterFrom,
                        r.renterTo,
                        r.product,
                        r.daysToRent
                    );

                    rentings.push(renting);
                });
                return rentings;
            });
        };*/

        var add = function(renting){
            var url =  '/api/renting/newRenting/';
            return $http.post(url, renting).then(function(response) {
                return response; //Expose the user data to your angular scope
            });
        };

        var edit = function(renting){
            var url =  '/api/renting/editRenting/';
            return $http.post(url, renting).then(function(response) {
                return response; //Expose the user data to your angular scope
            });
        };

        var remove = function(id){
            var url =   '/api/renting/removeById/'+id;
            return $http.get(url)
                .then(function(response) {
                    return response; //Expose the user data to your angular scope
                });
        };

        return {
            byId : byId,
            byRenterFrom : byRenterFrom,
            byRenterTo : byRenterTo,
            add : add,
            edit: edit,
            remove : remove
        };
    };
    angular.module("swoppr").factory("RentingService", ["$http", RentingService]);
})();


/**
 * Created by Greg on 24-Nov-15.
 */

(function(){
    "use strict";

    var UserService = function($http){
        var login = function(credentials) {
            var url = '/partials/login';
            return $http.post(url, credentials)
                .then(function(response) {
                    return response;
                });
        };

        var register = function(userData) {
            var url = '/partials/register';
            return $http.post(url, userData)
                .then(function(response) {
                    return response;
                });
        };

        var logout = function() {
            var url = '/partials/logout';
            return $http.post(url)
                .then(function(response) {
                    return response;
                });
        };

        var userData = function() {
            var url = '/api/user/userDataNavbar/' + new Date().getTime();
            return $http.get(url)
                .then(function(response) {
                    if(response.data.error) {
                        return "error";
                    }

                    var products = [];
                    var u = response.data;
                    angular.forEach(u.products, function(p) {
                        if (p.isDeleted === false) {
                            var product = new Product(
                                p._id,
                                p.productName,
                                parseInt(p.pricePerDay),
                                p.description,
                                p.url,
                                p.publicid,
                                p.place,
                                p.longitude,
                                p.latitude,
                                p.isDeleted
                            );
                            products.push(product);
                        }
                    });

                    return new UserWithCredentials(
                        u._id,
                        u.firstname,
                        u.surname,
                        u.local,
                        u.google,
                        products
                    );

            });
        };

        var byId = function(id){
            var url = '/api/user/getById/'+id;
            return $http.get(url)
                .then(function(response) {
                    if(response.data.error) {
                        return "error";
                    }

                    var u = response.data.ok;
                    return new UserWithCredentials(
                        u.firstname,
                        u.surname,
                        u.local.email,
                        u.products,
                        u.createdOn
                    );
                });
        };

        var AllWithProducts = function() {
            var url = '/api/user/getAllUsersWithProducts';
            return $http.get(url)
                .then(function(response) {
                    if(response.data.error) {
                        return "error";
                    }

                    var users = [];
                    angular.forEach(response.data, function(u){
                        var user = new UserWithCredentials(
                            u.firstname,
                            u.surname,
                            u.local.email,
                            u.products,
                            u.createdOn
                        );
                        users.push(user);
                    });
                    return users;
                });
        };

        var all = function(){
            var url =   '/api/user/getAll/';
            return $http.get(url)
                .then(function(response) {
                    if(response.data.error) {
                        return "error getting all users";
                    }

                    var users = [];
                    angular.forEach(response.data.ok, function(u) {
                        var user = new UserWithCredentials(
                            u.firstname,
                            u.surname,
                            u.local.email,
                            u.products,
                            u.createdOn
                        );
                        users.push(user);
                    });
                    return users;
                });
        };

        var add = function(user){
            var url =  '/api/user/newUser/';
            $http.post(url, user)
                .then(function(response) {
                    return response; //Expose the user data to your angular scope
                });
        };


        return {
            login: login,
            register: register,
            logout: logout,
            userData: userData,
            byId : byId,
            AllWithProducts : AllWithProducts,
            add : add,
            all : all
        };
    };
    angular.module("swoppr").factory("UserService", ["$http", UserService]);
})();